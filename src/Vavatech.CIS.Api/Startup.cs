using Bogus;
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Validators.Polish;
using Vavatech.CIS.Api.Identity;
using Vavatech.CIS.Api.Middlewares;
using Vavatech.CIS.Api.RouteConstraints;
using Vavatech.CIS.DbServices;
using Vavatech.CIS.Fakers;
using Vavatech.CIS.FakeServices;
using Vavatech.CIS.IServices;
using Vavatech.CIS.Models;
using Vavatech.CIS.Models.Validators;
using WebApiContrib.Core.Formatter.Csv;

namespace Vavatech.CIS.Api
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // services.AddSingleton<ICustomerService, FakeCustomerService>();

            string connectionString = Configuration.GetConnectionString("CISConnectionString");

            // dotnet add package Microsoft.Data.SqlClient

            services.AddScoped<IDbConnection>(options => new SqlConnection(connectionString));

            services.AddScoped<ICustomerService, DbCustomerService>();

            services.AddSingleton<Faker<Customer>, CustomerFaker>();

            services.AddSingleton<IReportService, FakeReportService>();
            services.AddSingleton<Faker<Report>, ReportFaker>();
            services.AddSingleton<Faker<ReportDetail>, ReportDetailFaker>();
            services.AddSingleton<Faker<Period>, PeriodFaker>();

            services.AddScoped<IServices.IAuthorizationService, AuthorizationService>();
            services.AddSingleton<IApiKeyService, FakeApiKeyService>();

            services.AddSingleton<PeselValidator>();



            // Rejestracja w³asnej regu³y tras
            services.Configure<RouteOptions>(options => options.ConstraintMap.Add("pesel", typeof(PeselRouteConstraint)));

            // Rejestracja opcji z pliku konfiguracyjnego
            services.Configure<FakeCustomerServiceOptions>(Configuration.GetSection("FakeCustomer"));

            // Rejestracja opcji w kodzie
            //services.Configure<FakeCustomerServiceOptions>(options =>
            //{
            //    options.Quantity = 40;
            //});

            // Rejestracja walidatorów
            // services.AddTransient<IValidator<Report>, ReportValidator>();
            // services.AddTransient<IValidator<Customer>, ReportCustomer>();

            // dotnet add package FluentValidation.AspNetCore
            // dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson
            // dotnet add package WebApiContrib.Core.Formatter.Csv
            services.AddControllers()
                .AddXmlSerializerFormatters()
                .AddCsvSerializerFormatters()
                .AddFluentValidation(options => options.RegisterValidatorsFromAssemblyContaining<ReportValidator>())
                .AddNewtonsoftJson(options =>
            {
                options.SerializerSettings.Converters.Add(new StringEnumConverter());                   // konwersja enum na tekst
                options.SerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;    // pomijanie wartoœci null
                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;  // zapobiega zapêtleniu
            });


            // OpenAPI (Swagger)
            // dotnet add package NSwag.AspNetCore
            services.AddOpenApiDocument(options =>
            {
                options.Title = "CIS API";
                options.DocumentName = "CIS Api document";
                options.Version = "v1";
                options.Description = "CIS API Autogenerated API documentation.";
            });


            services.AddAuthentication("Basic")
                .AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("Basic", null)
                //   .AddScheme<AuthenticationSchemeOptions, ApiKeyAuthenticationHandler>("ApiKey", null);
                ;

            // Rejestracja uchwytu autoryzacji
            services.AddSingleton<IAuthorizationHandler, GenderHandler>();

            // Rejestracja polityk (policies)
            services.AddAuthorization(options =>
            {
                options.AddPolicy("Szefowa", policy =>
                {
                    policy.Requirements.Add(new GenderRequirement(Gender.Female));
                    policy.RequireRole("Boss");
                });

                options.AddPolicy("Mezczyna", policy => policy.Requirements.Add(new GenderRequirement(Gender.Male)));
            });


        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            string smsApi = Configuration["SmsApiAddress"];
            int port = int.Parse(Configuration["SmsApiPort"]);

            string gatewayAddress = Configuration["GatewayApi:Address"];
            int gatewayPort = int.Parse(Configuration["GatewayApi:Port"]);


            // %APPDATA%\Microsoft\UserSecrets
            string googleMapSecretKey = Configuration["GoogleMapSecretKey"];

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();


            app.UseMiddleware<LimitRequestMiddleware>();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/dashboard", async context =>
                {
                    await context.Response.WriteAsync("Hello Dashboard!");
                });

                endpoints.MapControllers();
            });


            // dotnet add package NSwag.AspNetCore

            // Generowanie dokumentacji OpenAPI w postaci json
            // http://localhost:5000/swagger/v1/swagger.json
            app.UseOpenApi();

            // Generowanie dokumentacji OpenAPI w postaci strony
            // http://localhost:5000/swagger
            app.UseSwaggerUi3();


            // Jak w³¹czyæ automatyczn¹ analizê OpenAPI?
            /*
                 1. W pliku projektu dodaæ
                <PropertyGroup>
	                 <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
                  </PropertyGroup>

                2. Do klasy kontrolera dodaæ atrybut [ApiController]
            */
        }
    }
}
